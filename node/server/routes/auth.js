const express = require('express');
const router = express.Router();
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const crypto = require('crypto');
const User = require('../models/User');
const transporter = require('../utils/mailer');

// ----- C·∫•u h√¨nh ch·∫ø ƒë·ªô dev/prod -----
const DEV_MODE = true; 
// true = dev, false = production, dev mode gi√∫p kh√¥ng c·∫ßn g·ª≠i email,
//  c√≤n production th√¨ c√≥ g·ª≠i email x√°c th·ª±c th√¨ ph·∫£i ƒë·ªïi trong file mailer.js

// ===== ƒêƒÇNG K√ù =====
router.post('/register', async (req, res) => {
  try {
    const { username, email, password, tenhienthi } = req.body;

    // Ki·ªÉm tra tr√πng email
    const existingEmail = await User.findOne({ email });
    if (existingEmail) return res.status(400).json({ message: 'Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng' });

    // Ki·ªÉm tra tr√πng username
    const existingUsername = await User.findOne({ username });
    if (existingUsername) return res.status(400).json({ message: 'Username ƒë√£ t·ªìn t·∫°i' });

    // Hash password
    const passwordHash = await bcrypt.hash(password, 10);

    // T·∫°o token x√°c th·ª±c
    const verificationToken = crypto.randomBytes(32).toString('hex');

    // T·∫°o user m·ªõi
    const user = new User({
      username,
      email,
      tenhienthi,
      password,
      passwordHash,
      verificationToken,
      verified: false
    });

    await user.save();

    const verifyLink = `http://localhost:5000/auth/verify/${verificationToken}`;

    if (DEV_MODE) {
      // Dev: kh√¥ng g·ª≠i mail, tr·∫£ token tr·ª±c ti·∫øp
      console.log(`Dev mode: verification token for ${username}: ${verificationToken}`);
      return res.json({
        message: 'ƒêƒÉng k√Ω th√†nh c√¥ng (dev mode)!',
        verificationToken,
        verifyLink
      });
    }

    // Production: g·ª≠i mail
    await transporter.sendMail({
      from: '"H·ªá th·ªëng Quiz" <doggygerman@gmail.com>',
      to: email,
      subject: 'X√°c nh·∫≠n ƒëƒÉng k√Ω t√†i kho·∫£n',
      text: `Xin ch√†o ${tenhienthi || username}, nh·∫•n v√†o link ƒë·ªÉ x√°c nh·∫≠n: ${verifyLink}`
    });

    res.json({ message: 'ƒêƒÉng k√Ω th√†nh c√¥ng! Vui l√≤ng ki·ªÉm tra email ƒë·ªÉ x√°c nh·∫≠n.' });

  } catch (err) {
    console.error('üí• L·ªói ƒëƒÉng k√Ω:', err);
    res.status(500).json({ message: 'L·ªói server khi ƒëƒÉng k√Ω' });
  }
});

// ===== ƒêƒÇNG NH·∫¨P =====
router.post('/login', async (req, res) => {
  try {
    const { email, password } = req.body;

    const user = await User.findOne({ email });
    if (!user) return res.status(400).json({ message: 'Sai email ho·∫∑c m·∫≠t kh·∫©u' });

    if (!user.verified) {
      return res.status(403).json({ message: 'Vui l√≤ng x√°c nh·∫≠n email tr∆∞·ªõc khi ƒëƒÉng nh·∫≠p.' });
    }

    const match = await bcrypt.compare(password, user.passwordHash);
    if (!match) return res.status(400).json({ message: 'Sai email ho·∫∑c m·∫≠t kh·∫©u' });

    const token = jwt.sign(
      { id: user._id, username: user.username },
      process.env.JWT_SECRET || "MY_SECRET_KEY",
      { expiresIn: '1d' }
    );

    res.json({
      message: 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng!',
      token,
      user: {
        id: user._id,
        username: user.username,
        email: user.email,
        tenhienthi: user.tenhienthi,
        avatar: user.avatar
      }
    });
  } catch (err) {
    console.error('üí• L·ªói ƒëƒÉng nh·∫≠p:', err);
    res.status(500).json({ message: 'L·ªói server khi ƒëƒÉng nh·∫≠p' });
  }
});

// ===== X√ÅC NH·∫¨N EMAIL =====
router.get('/verify/:token', async (req, res) => {
  try {
    const user = await User.findOne({ verificationToken: req.params.token });
    if (!user) return res.status(400).send('Li√™n k·∫øt x√°c nh·∫≠n kh√¥ng h·ª£p l·ªá.');

    user.verified = true;
    user.verificationToken = null;
    await user.save();

    res.send('‚úÖ X√°c nh·∫≠n t√†i kho·∫£n th√†nh c√¥ng! B·∫°n c√≥ th·ªÉ ƒëƒÉng nh·∫≠p.');
  } catch (err) {
    console.error('üí• L·ªói x√°c nh·∫≠n email:', err);
    res.status(500).send('L·ªói x√°c nh·∫≠n t√†i kho·∫£n.');
  }
});

module.exports = router;
